const { Router } = require("express");
const User = require("../models/user");
const auth = require("../middleware/auth");
const router = Router();

// /api/auth/login
router.post("/login", async (req, res) => {
	try {
		const { email, password } = req.body;

		const user = await User.findByCredentials(email, password);
		const { token, expiresIn } = await user.generateAuthToken();

		res.json({ user, token, expiresIn, message: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É! ‚úåüèªüòé` });
	} catch (e) {
		res.status(500).json({ message: e.message });
	}
});

// /api/auth/logout
router.post("/logout", auth, async (req, res) => {
	try {
		req.user.tokens = req.user.tokens.filter((token) => {
			return token.token !== req.token;
		});
		await req.user.save();

		res.status(200).json({ message: "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å üòâüòä" });
	} catch (e) {
		res.status(500).json({ message: e.message });
	}
});

// /api/auth/signup
router.post("/signup", async (req, res) => {
	try {
		const { email, password } = req.body;

		const candidate = await User.findOne({ email });

		if (candidate) {
			return res.status(400).json({ message: "–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å üë§‚õî" });
		}

		const purchasesNumber = 0;
		const name = "";

		const user = new User({ email, password, purchasesNumber, name });
		await user.save();

		res.status(201).json({ message: "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ" });
	} catch (e) {
		res.status(500).json({ message: "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ üö´" });
	}
});

// /api/auth/check
router.get("/check", auth, async (req, res) => {
	try {
		res.json({ message: "OK" });
	} catch (e) {
		res.status(500).json({ message: "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ üö´" });
	}
});

module.exports = router;
